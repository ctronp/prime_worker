#[cfg(test)]
mod integration_tests {
    #[cfg(test)]
    use std::collections::HashMap;

    use actix_web::http;
    use reqwest::header::HeaderMap;

    use crate::entities::{Input, Output};
    use crate::statics::get_port_u16;

    #[actix_web::test]
    async fn test_index() {
        crate::statics::debug_initialize().await;

        let resp = reqwest::get(format!("http://0.0.0.0:{}/", get_port_u16()))
            .await
            .unwrap();
        pretty_assertions::assert_eq!(http::StatusCode::OK, resp.status());
    }

    #[actix_web::test]
    async fn small_primes() {
        crate::statics::debug_initialize().await;

        let mut header = HeaderMap::new();
        header.insert("Secret", crate::statics::get_secret().parse().unwrap());

        let res = reqwest::Client::new()
            .post(format!("http://0.0.0.0:{}/primes", get_port_u16()))
            .json(&Input {
                values: vec!["1".to_string(), "2".to_string(), "3".to_string()],
            })
            .headers(header)
            .send()
            .await
            .unwrap();

        let output = res.json::<Output>().await.unwrap();
        pretty_assertions::assert_eq!(
            output.values,
            HashMap::from([
                ("1".to_string(), "No".to_string()),
                ("2".to_string(), "Yes".to_string()),
                ("3".to_string(), "Yes".to_string()),
            ])
        )
    }

    #[actix_web::test]
    async fn large_primes() {
        crate::statics::debug_initialize().await;
        if (crate::statics::get_max_len_usize()) < 2000 {
            return;
        }

        let mut header = HeaderMap::new();
        header.insert("Secret", crate::statics::get_secret().parse().unwrap());

        let mut input = Input {
            values: vec![
                "10000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    00000000000000000000000000000171"
                    .to_string(),
                "10000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000000000000000000000000000000000000000000000000000000\
                    000000000000000000000000000002679"
                    .to_string(),
            ],
        };

        let output = reqwest::Client::new()
            .post(format!("http://0.0.0.0:{}/primes", get_port_u16()))
            .json(&input)
            .headers(header)
            .send()
            .await
            .unwrap()
            .json::<Output>()
            .await
            .unwrap();

        pretty_assertions::assert_eq!(
            output.values,
            HashMap::from([
                (input.values.pop().unwrap(), "Probably".to_string()),
                (input.values.pop().unwrap(), "Probably".to_string())
            ])
        );
    }

    #[actix_web::test]
    async fn too_many_inputs() {
        crate::statics::debug_initialize().await;

        let input = Input {
            values: vec![
                "1".to_string(),
                "1".to_string(),
                "1".to_string(),
                "1".to_string(),
                "1".to_string(),
                "1".to_string(),
                "1".to_string(),
                "1".to_string(),
                "1".to_string(),
                "1".to_string(),
                "1".to_string(),
                "1".to_string(),
                "1".to_string(),
                "1".to_string(),
                "1".to_string(),
                "1".to_string(),
                "1".to_string(),
                "1".to_string(),
                "1".to_string(),
                "1".to_string(),
                "1".to_string(),
            ],
        };

        let mut header = HeaderMap::new();
        header.insert("Secret", crate::statics::get_secret().parse().unwrap());

        let response = reqwest::Client::new()
            .post(format!("http://0.0.0.0:{}/primes", get_port_u16()))
            .json(&input)
            .headers(header)
            .send()
            .await
            .unwrap();

        pretty_assertions::assert_ne!(response.status(), http::StatusCode::BAD_REQUEST);
    }

    #[actix_web::test]
    async fn values_too_many_chars() {
        crate::statics::debug_initialize().await;

        let first_value = "1".repeat(crate::statics::get_max_len_usize() + 1);

        let input = Input {
            values: vec![first_value.clone()],
        };

        let mut header = HeaderMap::new();
        header.insert("Secret", crate::statics::get_secret().parse().unwrap());

        let response = reqwest::Client::new()
            .post(format!("http://0.0.0.0:{}/primes", get_port_u16()))
            .json(&input)
            .headers(header)
            .send()
            .await
            .unwrap()
            .json::<Output>()
            .await
            .unwrap();

        pretty_assertions::assert_eq!(
            response.values,
            HashMap::from([(first_value, "value exceed max size limit".to_string())])
        );
    }
}
